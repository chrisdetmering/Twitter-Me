{"version":3,"sources":["Components/Login/Login.js","Components/NavBar/NavBar.js","Components/TweetSearch/TweetSearch.js","Components/Home/Home.js","Components/Profile/Profile.js","Components/Util/Auth/ProtectedRoute.js","Components/Util/Auth/GetCredentials.js","App.js","reportWebVitals.js","index.js"],"names":["Login","props","login","history","useHistory","onClick","push","fetch","then","data","text","response","window","location","NavBar","to","activeClassName","alert","logout","TweetSearch","useState","localTrendingTweets","setLocalTrendingTweets","searchedTweets","setSearchedTweets","searchTerm","setSearchTerm","isSearched","setIsSearched","useEffect","json","length","console","log","trends","catch","error","type","placeholder","onChange","e","preventDefault","target","value","statuses","map","tweet","id","trend","idx","name","Home","homeTimelineTweets","setHomeTimelineTweets","newTweet","setNewTweet","setIsLoggedIn","getTimelineTweets","errors","message","ok","Profile","profileImageUrl","setProfileImageUrl","src","alt","ProtectedRoute","children","isLoggedIn","render","pathname","state","from","GetCredentials","useLocation","params","URLSearchParams","search","oauthToken","get","oauthVerifier","param","Object","keys","localStorage","setItem","App","Boolean","getItem","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e883e0c.chunk.js","sourcesContent":["import { useHistory } from \"react-router-dom\"; \nimport React from 'react'; \nexport default function Login(props) { \n  const {login} = props; \n  let history = useHistory(); \n\n  function handleLoginClick() { \n    login(true) \n    history.push(\"/home\")\n  }\n\n  function handleTwitterLoginClick() { \n    fetch(\"/api/sign-in-with-twitter\")\n    .then(data => {\n      return data.text()\n     })\n    .then(response => { \n      window.location = response; \n    }); \n  }\n\n\n  return(<>\n    <button onClick={handleLoginClick}>Login</button>\n    <button onClick={handleTwitterLoginClick}>Sign in with Twitter</button>\n  </>); \n}","import \"./NavBar.css\"; \nimport { \n  NavLink\n} from \"react-router-dom\";\n\n\nexport default function NavBar(props) { \n\n\n  function handleTweetButtonClick() { \n    alert(\"model pop up\"); \n\n  }\n\n  return(\n    <ul>\n      <li>\n        <NavLink to=\"/home\" activeClassName=\"active\">home</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/profile\" activeClassName=\"active\">profile</NavLink>\n      </li>\n      <li>\n        <button onClick={handleTweetButtonClick}>Tweet</button>\n      </li>\n      <li>\n        <button onClick={props.logout}>Logout</button>\n      </li>\n    </ul>\n  ); \n\n}","import {useEffect, useState} from 'react'; \n\nexport default function TweetSearch(props) { \n  const [localTrendingTweets, setLocalTrendingTweets] = useState([]); \n  const [searchedTweets, setSearchedTweets] = useState([]); \n  const [searchTerm, setSearchTerm] = useState(''); \n  const [isSearched, setIsSearched] = useState(false); \n\n\n  useEffect(() => { \n    fetch(`/api/trends`)\n    .then(data => data.json())\n    .then(response => { \n      if (response.length > 0) { \n        console.log(response[0].trends);\n        setLocalTrendingTweets(response[0].trends); \n      }\n    })\n    .catch(error => console.error(error))\n  }, [])\n\n\n  function handleSearchChange(e) { \n    e.preventDefault(); \n    const searchTerm = e.target.value; \n    setSearchTerm(searchTerm); \n  }\n\n  function handleSearchButtonClick() { \n    fetch(`/api/search?q=${searchTerm}`)\n    .then(data => data.json())\n    .then(response => { \n      setIsSearched(true); \n      setSearchedTweets(response.statuses);\n      setSearchTerm('');\n     })\n    .catch(error => console.log(error))\n  }\n\n\n\n//TODO: need to think of a better way of doing this\n  function displayTweets() { \n    if (isSearched) { \n      return searchedTweets.map(tweet => (\n        <li key={tweet.id}>{tweet.text}</li>\n      ))\n    }\n\n    return localTrendingTweets.map((trend, idx) => (\n      <li key={idx}>{trend.name}</li>\n    ))\n  }\n\n\n  return (<>\n    <br/>\n    <input \n      type=\"text\" \n      placeholder=\"search twitter...\"\n      onChange={handleSearchChange} \n      value={searchTerm}/>\n    <button onClick={handleSearchButtonClick}>Search</button>\n    <ul>\n      {displayTweets()}\n    </ul>\n  </>)\n}","import {useState, useEffect} from \"react\"; \nimport NavBar from \"../NavBar/NavBar\"; \nimport TweetSearch from '../TweetSearch/TweetSearch'; \n\nexport default function Home(props) { \n  const [profileImageUrl, setProfileImageUrl] = useState(''); \n  const [homeTimelineTweets, setHomeTimelineTweets] = useState([]); \n  const [newTweet, setNewTweet] = useState(''); \n  const {setIsLoggedIn} = props; \n  \n  // useEffect(() => { \n  //   fetch(`/api/profile-picture`)\n  //   .then(data => data.json())\n  //   .then(response => {\n  //     setProfileImageUrl(response); \n  //   })\n  //   .catch(error => console.error(error))\n  // }, [])\n\n  useEffect(() => { \n    getTimelineTweets(); \n  }, [])\n\n\n  function getTimelineTweets() { \n    fetch(`/api/home-timeline`)\n    .then(data => data.json())\n    .then(response => { \n      \n      if (response.errors) { \n        alert(response.errors[0].message);\n        console.error(response.errors[0].message); \n        return; \n      }\n\n      if (response) { \n        setHomeTimelineTweets(response); \n      }\n    })\n    .catch(error => console.error(error))\n  }\n\n\n  function handleNewTweetChange(e) { \n    e.preventDefault(); \n    const newTweet = e.target.value;\n    setNewTweet(newTweet); \n  } \n\n\n  function handleNewTweet() { \n    fetch(`/api/status/update?status=${newTweet}`)\n    .then(response => {\n      if (response.ok) { \n        getTimelineTweets();  \n        setNewTweet(''); \n      }\n      \n    })\n    .catch(error => console.error(error))\n  }\n\n  return(<>\n    <NavBar logout={() => setIsLoggedIn(false)}/>\n    {/*TweetCard*/}\n    <h1>Home</h1>\n    {/* <img src={profileImageUrl} alt=\"profile-pic\"/>  */}\n    <input placeholder=\"what's happening?\" onChange={handleNewTweetChange} value={newTweet}/>\n    <button onClick={handleNewTweet}>Tweet</button>\n\n\n    {/*Timeline */}\n    <ul>\n      {homeTimelineTweets.map(tweet => (\n        <li key={tweet.id}>{tweet.text}</li>\n      ))}\n    </ul>\n\n    <TweetSearch />\n  </>); \n}","import {useEffect, useState} from 'react'; \n\nimport NavBar from \"../NavBar/NavBar\"; \nimport TweetSearch from \"../TweetSearch/TweetSearch\"; \nexport default function Profile(props) { \n  const [profileImageUrl, setProfileImageUrl] = useState(''); \n  const { setIsLoggedIn } = props; \n\n  useEffect(() => { \n    fetch(`/api/profile-picture`)\n    .then(data => data.json())\n    .then(response => {\n      setProfileImageUrl(response); \n    })\n    .catch(error => console.error(error))\n  }, []);\n\n  useEffect(() => { \n    fetch('api/profile-info')\n    .then(data => console.log(data))\n    \n  }, []);\n\n\n  function handleEditProfileClick() { \n    alert('modal pop up'); \n\n  }\n\n\n\n  return(<>\n    <NavBar logout={() => setIsLoggedIn(false)}/>\n    <h1>Profile</h1>\n    <p>Banner</p>\n    <img src={profileImageUrl} alt=\"profile-pic\"/> \n    <button onClick={handleEditProfileClick}>Edit profile</button>\n    <p><strong>Name</strong></p>\n    <p>Tweet Handler</p>\n    <p>Bio</p>\n    <p>Date Joined</p>\n    <p>Following</p>\n    <p>Followers</p>\n    <ul>\n      {/*tweets*/}\n    </ul>\n    <TweetSearch />\n   \n  </>); \n}","import { \n  Route, \n  Redirect,\n} from \"react-router-dom\"; \n\nexport default function ProtectedRoute(props) { \n  const { children, isLoggedIn } = props; \n  return( \n    <Route\n      render={({location}) => \n        isLoggedIn ? ( \n          children\n        ) : ( \n          <Redirect \n           to={{\n             pathname: \"/\", \n             state: { from: location }\n           }}\n          />\n        )\n      }\n    />\n  );\n\n}","import { useEffect } from \"react\"; \nimport { useHistory }  from \"react-router-dom\"; \nimport { \n  useLocation\n} from \"react-router-dom\"; \n\nexport default function GetCredentials(props) { \n  const location = useLocation(); \n  const history = useHistory(); \n  const params = new URLSearchParams(location.search);\n  const oauthToken = params.get('oauth_token'); \n  const oauthVerifier = params.get('oauth_verifier');\n \n\n  useEffect(() => { \n    fetch(`/api/access-token?oauth_token=${oauthToken}&oauth_verifier=${oauthVerifier}`)\n    .then(data => data.json())\n    .then(response => {\n     \n      if (response && Object.keys(response).length === 0) { \n        //TODO: refactor this to use throw\n        alert('Something went wrong. Do not press the reload putting while on this page')\n        console.error(`Response object is empty. This means that the user reloaded the get-credentials page \n        or something went wrong with the signing process`); \n        console.log('response object', response); \n        history.push('/'); \n      }\n      //TODO: make this safer\n      //Just temporality storing use auth information in local storage until \n      //I can figure out a more secure way of doing it without a DB\n      for (const param in response) { \n        localStorage.setItem(param, response[param]); \n      }\n    \n    })\n    .then(() => { \n      props.login(true); \n      history.push('/home'); \n    })\n    .catch(error => console.log(`Network error: ${error}`)); \n  }, [oauthToken, oauthVerifier])\n  \n\n  return (<h1>Loading your profile...</h1>);\n\n\n}","import {useState} from 'react'; \nimport { \n  BrowserRouter as Router, \n  Switch, \n  Route\n} from \"react-router-dom\"; \nimport Login from \"./Components/Login/Login\"; \nimport Home from \"./Components/Home/Home\"; \nimport Profile from \"./Components/Profile/Profile\"; \nimport ProtectedRoute from \"./Components/Util/Auth/ProtectedRoute\"; \nimport GetCredentials from \"./Components/Util/Auth/GetCredentials\"; \nimport './App.css';\n\nfunction App() {\n  const initialState = () => Boolean(localStorage.getItem(\"screen_name\"));\n  const [isLoggedIn, setIsLoggedIn] = useState(initialState); \n\n\n  return (\n    <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Login login={setIsLoggedIn}/>\n          </Route>\n          <Route exact path=\"/get-credentials\"> \n            <GetCredentials login={setIsLoggedIn}/>\n          </Route>\n          <ProtectedRoute exact path=\"/home\" isLoggedIn={isLoggedIn} >\n            <Home setIsLoggedIn={setIsLoggedIn} />\n          </ProtectedRoute>\n          <ProtectedRoute exact path=\"/profile\" isLoggedIn={isLoggedIn} >\n            <Profile setIsLoggedIn={setIsLoggedIn} />\n          </ProtectedRoute>\n        </Switch>\n    </Router>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}