[{"/Users/chris/twitter-me/client/src/App.js":"1","/Users/chris/twitter-me/client/src/reportWebVitals.js":"2","/Users/chris/twitter-me/client/src/index.js":"3","/Users/chris/twitter-me/client/src/Components/Home/Home.js":"4","/Users/chris/twitter-me/client/src/Components/Profile/Profile.js":"5","/Users/chris/twitter-me/client/src/Components/Login/Login.js":"6","/Users/chris/twitter-me/client/src/Components/Util/Auth/ProtectedRoute.js":"7","/Users/chris/twitter-me/client/src/Components/NavBar/NavBar.js":"8","/Users/chris/twitter-me/client/src/Components/Util/Auth/GetCredentials.js":"9","/Users/chris/twitter-me/client/src/Components/TweetSearch/TweetSearch.js":"10","/Users/chris/twitter-me/client/src/Components/Util/UI/Modals/Modal.js":"11","/Users/chris/twitter-me/client/src/Components/Profile/Details/Details.js":"12","/Users/chris/twitter-me/client/src/Components/Tweets/NewTweet/NewTweet.js":"13"},{"size":1197,"mtime":1613155083635,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1611793319829,"results":"16","hashOfConfig":"15"},{"size":500,"mtime":1611793319828,"results":"17","hashOfConfig":"15"},{"size":1614,"mtime":1614724091486,"results":"18","hashOfConfig":"15"},{"size":3918,"mtime":1615243332571,"results":"19","hashOfConfig":"15"},{"size":1532,"mtime":1615261450538,"results":"20","hashOfConfig":"15"},{"size":429,"mtime":1613155083635,"results":"21","hashOfConfig":"15"},{"size":1210,"mtime":1615243332571,"results":"22","hashOfConfig":"15"},{"size":1663,"mtime":1614713903854,"results":"23","hashOfConfig":"15"},{"size":1600,"mtime":1614118586946,"results":"24","hashOfConfig":"15"},{"size":396,"mtime":1615243332571,"results":"25","hashOfConfig":"15"},{"size":623,"mtime":1614193507460,"results":"26","hashOfConfig":"15"},{"size":894,"mtime":1614724628751,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"coygfg",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/chris/twitter-me/client/src/App.js",[],["61","62"],"/Users/chris/twitter-me/client/src/reportWebVitals.js",[],["63","64"],"/Users/chris/twitter-me/client/src/index.js",[],["65","66"],"/Users/chris/twitter-me/client/src/Components/Home/Home.js",["67","68","69"],"import {useState, useEffect} from \"react\"; \nimport NavBar from \"../NavBar/NavBar\"; \nimport TweetSearch from '../TweetSearch/TweetSearch'; \nimport NewTweet from \"../Tweets/NewTweet/NewTweet\"; \n\nexport default function Home(props) { \n  const [profileImageUrl, setProfileImageUrl] = useState(''); \n  const [homeTimelineTweets, setHomeTimelineTweets] = useState([]); \n  const {setIsLoggedIn} = props; \n  \n  // useEffect(() => { \n  //   fetch(`/api/profile-picture`)\n  //   .then(data => data.json())\n  //   .then(response => {\n  //     setProfileImageUrl(response); \n  //   })\n  //   .catch(error => console.error(error))\n  // }, [])\n\n  useEffect(() => { \n    getTimelineTweets(); \n  }, [])\n\n\n  function getTimelineTweets() { \n    fetch(`/api/home-timeline`)\n    .then(data => data.json())\n    .then(response => { \n      \n      if (response.errors) { \n        alert(response.errors[0].message);\n        console.error(response.errors[0].message); \n        return; \n      }\n\n      if (response) { \n        setHomeTimelineTweets(response); \n      }\n    })\n    .catch(error => { \n      alert(`There was the following network error ${error}`)\n      console.error(error); \n    })\n  }\n\n\n\n  return(<>\n    <NavBar \n      logout={() => setIsLoggedIn(false)}\n      getTimelineTweets={getTimelineTweets}\n    />\n    {/*TweetCard*/}\n    <h1>Home</h1>\n    {/* <img src={profileImageUrl} alt=\"profile-pic\"/>  */}\n    {/* <NewTweet getTweets={getTimelineTweets}/> */}\n\n    {/*Timeline */}\n    <ul>\n      {homeTimelineTweets.map(tweet => (\n        <li key={tweet.id}>{tweet.text}</li>\n      ))}\n    </ul>\n\n    <TweetSearch />\n  </>); \n}","/Users/chris/twitter-me/client/src/Components/Profile/Profile.js",["70"],"import {useEffect, useState} from 'react'; \nimport Details from \"./Details/Details\";\nimport NavBar from \"../NavBar/NavBar\"; \nimport Modal from \"../Util/UI/Modals/Modal\";\nimport TweetSearch from \"../TweetSearch/TweetSearch\"; \n\n\n\nexport default function Profile(props) { \n  const { setIsLoggedIn } = props; \n  const [profileDetails, setProfileDetails] = useState(null); \n  const [showModal, setShowModal] = useState(false);  \n  const [name, setName] = useState('');\n  const [description, setDescription] = useState('');\n  const [profileImageUrl, setProfileImageUrl] = useState(''); \n  const [image, setImage] = useState(null); \n  const [userTimeline, setUserTimeline] = useState([]); \n\n  useEffect(() => { \n    getProfileDetails(); \n  }, []);\n\n  useEffect(() => { \n    getUserTimeline(); \n  }, []); \n\n  function getProfileDetails() { \n    fetch('api/profile-details')\n    .then(data => data.json())\n    .then(response => { \n      setName(response.name);\n      setDescription(response.description);\n      setProfileImageUrl(response.profile_image_url);\n      setProfileDetails(response);\n      \n    })\n    .catch(error => { \n      alert(`There was the following network error ${error}`)\n      console.error(error); \n    })\n    \n  }\n\n  \n\n  function getUserTimeline() { \n    fetch('api/user-timeline')\n    .then(data => data.json())\n    .then(response => {\n      setUserTimeline(response); \n    })\n    .catch(error => { \n      console.error(error); \n    }); \n  }\n\n\n\n  function handleEditProfileClick() { \n    setShowModal(true);\n  }\n\n  function handleCloseModalClick(event) { \n    const isBackDropClicked = event.target.id === \"modal-backdrop\"; \n    const isCloseButtonClicked = event.target.id === \"modal-close-button\"; \n\n    if (isBackDropClicked || isCloseButtonClicked) { \n      setShowModal(false); \n    }\n  }\n\n  function handleEditProfileSubmit(event){ \n    event.preventDefault();\n    fetch(`/api/profile-update?name=${name}&description=${description}`, { \n      method: \"POST\"\n    })\n    .then(data => {\n        return data.json()\n    })\n    .then(response => { \n      if (response) { \n        setName(response.name);\n        setDescription(response.description);\n        setProfileDetails(response);\n      }\n    })\n    .catch(error => { \n      alert(`There was the following network error ${error}`)\n      console.error(error); \n    })\n    .finally(() => setShowModal(false));\n  }\n\n  function updateProfileImage() { \n    fetch(`/api/profile-image-update?image=${image}`, { \n      method: \"POST\"\n    })\n    .then(data => data.json())\n    .then(response => console.log(response))\n  }\n\n\n  function handleDescriptionChange(event) { \n    const newDescription = event.target.value; \n    setDescription(newDescription);\n  }\n\n  function handleNameChange(event) { \n    const newName = event.target.value; \n    setName(newName); \n  }\n\n  function onProfileImageChange(event) { \n    const imageJPG = event.target.files[0].name; \n    setImage(imageJPG); \n  }\n\n  useEffect(() => { \n    console.log(image); \n  }, [image])\n\n  return(<>\n    <Modal show={showModal} close={handleCloseModalClick}>\n      <h1>Edit Profile</h1> \n      <form onSubmit={handleEditProfileSubmit}>\n          <input type=\"file\" onChange={onProfileImageChange} />\n          <br />\n          <img src={profileImageUrl} alt=''/>\n          <br />\n          <input onChange={handleNameChange} value={name}/>\n          <br />\n          <textarea\n            rows=\"4\"\n            cols=\"50\"\n            onChange={handleDescriptionChange} value={description}>\n          </textarea>\n          <br />\n          <input type=\"submit\" value=\"Save\"/>\n      </form>\n    </Modal>\n    <NavBar logout={() => setIsLoggedIn(false)} getTweets={getUserTimeline}/>\n\n    <Details \n      details={profileDetails}\n      onEditButtonClick={handleEditProfileClick}\n    />\n    {userTimeline.map(tweet => (\n      <li key={tweet.id}>{tweet.text}</li>\n    ))}\n    <TweetSearch />\n  </>); \n}","/Users/chris/twitter-me/client/src/Components/Login/Login.js",["71","72","73"],"/Users/chris/twitter-me/client/src/Components/Util/Auth/ProtectedRoute.js",[],["74","75"],"/Users/chris/twitter-me/client/src/Components/NavBar/NavBar.js",[],"/Users/chris/twitter-me/client/src/Components/Util/Auth/GetCredentials.js",[],"/Users/chris/twitter-me/client/src/Components/TweetSearch/TweetSearch.js",[],["76","77"],"/Users/chris/twitter-me/client/src/Components/Util/UI/Modals/Modal.js",[],"/Users/chris/twitter-me/client/src/Components/Profile/Details/Details.js",[],"/Users/chris/twitter-me/client/src/Components/Tweets/NewTweet/NewTweet.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"78","replacedBy":"82"},{"ruleId":"80","replacedBy":"83"},{"ruleId":"78","replacedBy":"84"},{"ruleId":"80","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":16},{"ruleId":"86","severity":1,"message":"90","line":7,"column":10,"nodeType":"88","messageId":"89","endLine":7,"endColumn":25},{"ruleId":"86","severity":1,"message":"91","line":7,"column":27,"nodeType":"88","messageId":"89","endLine":7,"endColumn":45},{"ruleId":"86","severity":1,"message":"92","line":94,"column":12,"nodeType":"88","messageId":"89","endLine":94,"endColumn":30},{"ruleId":"93","severity":1,"message":"94","line":22,"column":5,"nodeType":"95","endLine":22,"endColumn":57},{"ruleId":"93","severity":1,"message":"94","line":25,"column":9,"nodeType":"95","endLine":26,"endColumn":42},{"ruleId":"93","severity":1,"message":"94","line":30,"column":13,"nodeType":"95","endLine":30,"endColumn":65},{"ruleId":"78","replacedBy":"96"},{"ruleId":"80","replacedBy":"97"},{"ruleId":"78","replacedBy":"98"},{"ruleId":"80","replacedBy":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],["100"],["101"],["100"],["101"],"no-unused-vars","'NewTweet' is defined but never used.","Identifier","unusedVar","'profileImageUrl' is assigned a value but never used.","'setProfileImageUrl' is assigned a value but never used.","'updateProfileImage' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["100"],["101"],["100"],["101"],"no-global-assign","no-unsafe-negation"]