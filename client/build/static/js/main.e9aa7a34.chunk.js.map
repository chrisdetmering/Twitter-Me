{"version":3,"sources":["Components/Login/Login.js","Components/NavBar/NavBar.js","Components/Home/Home.js","Components/Profile/Profile.js","Components/Util/Auth/ProtectedRoute.js","Components/Util/Auth/GetCredentials.js","App.js","reportWebVitals.js","index.js"],"names":["Login","props","login","history","useHistory","onClick","push","fetch","then","data","text","response","window","location","NavBar","to","activeClassName","logout","Home","useState","profileImageUrl","setProfileImageUrl","homeTimelineTweets","setHomeTimelineTweets","setIsLoggedIn","useEffect","json","catch","error","console","src","alt","map","tweet","id","type","placeholder","Profile","ProtectedRoute","children","isLoggedIn","render","pathname","state","from","GetCredentials","useLocation","params","URLSearchParams","search","oauthToken","get","oauthVerifier","param","Object","keys","length","alert","log","localStorage","setItem","App","Boolean","getItem","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9aa7a34.chunk.js","sourcesContent":["import { useHistory } from \"react-router-dom\"; \nimport React from 'react'; \nexport default function Login(props) { \n  const {login} = props; \n  let history = useHistory(); \n\n  function handleLoginClick() { \n    login(true) \n    history.push(\"/home\")\n  }\n\n  function handleTwitterLoginClick() { \n    fetch(\"/api/sign-in-with-twitter\")\n    .then(data => data.text())\n    .then(response => { \n      window.location = response; \n    }); \n  }\n\n\n  return(<>\n    <button onClick={handleLoginClick}>Login</button>\n    <button onClick={handleTwitterLoginClick}>Sign in with Twitter</button>\n  </>); \n}","import \"./NavBar.css\"; \nimport { \n  NavLink\n} from \"react-router-dom\";\n\n\nexport default function NavBar(props) { \n  return(\n    <ul>\n      <li>\n        <NavLink to=\"/home\" activeClassName=\"active\">home</NavLink>\n      </li>\n      <li>\n        <NavLink to=\"/profile\" activeClassName=\"active\">profile</NavLink>\n      </li>\n      <li>\n        <button>Tweet</button>\n      </li>\n      <li>\n        <button onClick={props.logout}>Logout</button>\n      </li>\n    </ul>\n  ); \n\n}","import {useState, useEffect} from \"react\"; \nimport NavBar from \"../NavBar/NavBar\"; \nexport default function Home(props) { \n  const [profileImageUrl, setProfileImageUrl] = useState(''); \n  const [homeTimelineTweets, setHomeTimelineTweets] = useState([]); \n  const [localTrendingTweets, setLocalTrendingTweets] = useState([]); \n  const {setIsLoggedIn} = props; \n  \n  useEffect(() => { \n    fetch(`/api/profile-picture`)\n    .then(data => data.json())\n    .then(response => {\n      setProfileImageUrl(response); \n    })\n    .catch(error => console.error(error))\n  }, [])\n\n  useEffect(() => { \n    fetch(`/api/home-timeline`)\n    .then(data => data.json())\n    .then(response => { \n      if (response) { \n        setHomeTimelineTweets(response); \n      }\n    })\n    .catch(error => console.error(error))\n  }, [])\n\n\n  // useEffect(() => { \n  //   fetch(`/api/trends`)\n  //   .then(data => data.json())\n  //   .then(response => { \n  //     if (response) { \n  //       setHomeTimelineTweets(response); \n  //     }\n  //   })\n  //   .catch(error => console.error(error))\n  // }, [])\n\n\n  return(<>\n    <NavBar logout={() => setIsLoggedIn(false)}/>\n    \n    \n    {/*TweetCard*/}\n    <h1>Home</h1>\n    <img src={profileImageUrl} alt=\"profile-pic\"/> \n    <p>What's Happening?</p>\n    <button>Tweet</button>\n\n\n    {/*Timeline */}\n    <ul>\n      {homeTimelineTweets.map(tweet => (\n        <li key={tweet.id}>{tweet.text}</li>\n      ))}\n    </ul>\n\n\n    {/* SearchBar*/}\n    <br/>\n    <input type=\"text\" placeholder=\"search twitter...\"/>\n    {/*What's Happing local trends*/}\n    {/*TODO: get local trends using:}\n    {/*1. /trends/available endpoint */}\n    {/*2. /trends/location* endpoint */}\n    <ul>\n\n    </ul>\n  </>); \n}","import NavBar from \"../NavBar/NavBar\"; \n\nexport default function Profile(props) { \n  const { setIsLoggedIn } = props; \n\n  return(<>\n    <NavBar/>\n    <h1>Profile</h1>\n    <input type=\"text\" placeholder=\"search twitter...\"/>\n    <button onClick={() => setIsLoggedIn(false)}>Logout</button>\n  </>); \n}","import { \n  Route, \n  Redirect,\n} from \"react-router-dom\"; \n\nexport default function ProtectedRoute(props) { \n  const { children, isLoggedIn } = props; \n  return( \n    <Route\n      render={({location}) => \n        isLoggedIn ? ( \n          children\n        ) : ( \n          <Redirect \n           to={{\n             pathname: \"/\", \n             state: { from: location }\n           }}\n          />\n        )\n      }\n    />\n  );\n\n}","import { useEffect } from \"react\"; \nimport { useHistory }  from \"react-router-dom\"; \nimport { \n  useLocation\n} from \"react-router-dom\"; \n\nexport default function GetCredentials(props) { \n  const location = useLocation(); \n  const history = useHistory(); \n  const params = new URLSearchParams(location.search);\n  const oauthToken = params.get('oauth_token'); \n  const oauthVerifier = params.get('oauth_verifier');\n \n\n  useEffect(() => { \n    fetch(`/api/access-token?oauth_token=${oauthToken}&oauth_verifier=${oauthVerifier}`)\n    .then(data => data.json())\n    .then(response => {\n     \n      if (response && Object.keys(response).length === 0) { \n        //TODO: refactor this to use throw\n        alert('Something went wrong. Do not press the reload putting while on this page')\n        console.error(`Response object is empty. This means that the user reloaded the get-credentials page \n        or something went wrong with the signing process`); \n        console.log('response object', response); \n        history.push('/'); \n      }\n      //TODO: make this safer\n      //Just temporality storing use auth information in local storage until \n      //I can figure out a more secure way of doing it without a DB\n      for (const param in response) { \n        localStorage.setItem(param, response[param]); \n      }\n    \n    })\n    .then(() => { \n      props.login(true); \n      history.push('/home'); \n    })\n    .catch(error => console.log(`Network error: ${error}`)); \n  }, [oauthToken, oauthVerifier])\n  \n\n  return (<h1>Loading your profile...</h1>);\n\n\n}","import {useState} from 'react'; \nimport { \n  BrowserRouter as Router, \n  Switch, \n  Route\n} from \"react-router-dom\"; \nimport Login from \"./Components/Login/Login\"; \nimport Home from \"./Components/Home/Home\"; \nimport Profile from \"./Components/Profile/Profile\"; \nimport ProtectedRoute from \"./Components/Util/Auth/ProtectedRoute\"; \nimport GetCredentials from \"./Components/Util/Auth/GetCredentials\"; \nimport './App.css';\n\nfunction App() {\n  const initialState = () => Boolean(localStorage.getItem(\"screen_name\"));\n  const [isLoggedIn, setIsLoggedIn] = useState(initialState); \n\n\n  return (\n    <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Login login={setIsLoggedIn}/>\n          </Route>\n          <Route exact path=\"/get-credentials\"> \n            <GetCredentials login={setIsLoggedIn}/>\n          </Route>\n          <ProtectedRoute exact path=\"/home\" isLoggedIn={isLoggedIn} >\n            <Home setIsLoggedIn={setIsLoggedIn} />\n          </ProtectedRoute>\n          <ProtectedRoute exact path=\"/profile\" isLoggedIn={isLoggedIn} >\n            <Profile setIsLoggedIn={setIsLoggedIn} />\n          </ProtectedRoute>\n        </Switch>\n    </Router>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}